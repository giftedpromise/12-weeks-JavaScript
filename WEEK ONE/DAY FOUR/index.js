//DAY FOUR
//Topic Covered: Data types (strings, numbers, booleans, null, undefined)

/* 
Data types can be divided into two:

Primitive data types
Non-primitive data types(Object References)
Primitive Data Types
Primitive data types in JavaScript include:

Numbers - Integers, floats
Strings - Any data under single quote, double quote or backtick quote
Booleans - true or false value
Null - empty value or no value
Undefined - a declared variable without a value
Symbol - A unique value that can be generated by Symbol constructor
Non-primitive data types in JavaScript includes:

Objects
Arrays

 Primitive data types are immutable(non-modifiable) data types. Once a primitive data type is created we cannot modify it.
 Primitive data types are compared by its values

JavaScript has several built-in data types that you’ll use frequently. Here’s an overview of the main data types along with some practice questions to help you understand and apply them.

1. Strings
Definition: Strings are sequences of characters enclosed in quotes. You can use single quotes ('), double quotes ("), or backticks (`).

*/
//Example

let str1 = "Hello, World!";
let str2 = "JavaScript is fun!";
let str3 = `Template literals are useful.`;

//2. Numbers
//Definition: Numbers represent both integer and floating-point numbers.

let intNumber = 42;
let floatNumber = 3.14;

//3. Booleans
//Definition: Booleans represent a logical entity and can be either true or false.
let isTrue = true;
let isFalse = false;

//4. Null
//Definition: null represents the intentional absence of any object value.
let emptyValue = null;

//5. Undefined
//Definition: undefined means a variable has been declared but not assigned a value.
let notAssigned;
console.log(notAssigned); // undefined

//DATA COMPARISON

let numOne = 3;
let numTwo = 3;

console.log(numOne == numTwo); // true

let js = "JavaScript";
let py = "Python";

console.log(js == py); //false

let lightOn = true;
let lightOff = false;

console.log(lightOn == lightOff); // false

/* 
Non-Primitive Data Types
Non-primitive data types are modifiable or mutable. 
We can modify the value of non-primitive data types after it gets created. 
Let us see by creating an array. 
An array is a list of data values in a square bracket. 
Arrays can contain the same or different data types.
 Array values are referenced by their index.
  In JavaScript array index starts at zero. I.e., 
  the first element of an array is found at index zero, 
  the second element at index one, and the third element at index two, etc.
*/

let nums = [1, 2, 3];
nums[0] = 10;

console.log(nums); // [10, 2, 3]

/*
As you can see, an array, which is a non-primitive data type is mutable. 
Non-primitive data types cannot be compared by value. 
Even if two non-primitive data types have the same properties and values, 
they are not strictly equal.
*/

let nums = [1, 2, 3];
let numbers = [1, 2, 3];

console.log(nums == numbers); // false

let userOne = {
  name: "Asabeneh",
  role: "teaching",
  country: "Finland",
};

let userTwo = {
  name: "Asabeneh",
  role: "teaching",
  country: "Finland",
};

console.log(userOne == userTwo); // false
